The visual and amusement tests, included here, do not occur
in dieharder or TestU01.  Dieharder and TestU01 are statistical
test suites.  To test erandu with dieharder or TestU01, feed
the output from eranduraw into those test suites.

------------------------------------------------------

Test erandu by running tsterandu.  There are no parameters.

./tsterandu

The output from tsterandu is a block of 1000 random zeros
and ones.

------------------------------------------------------

Uniform distribution chi square test.
There are no parameters.

./eranduchi

The output from eranduchi is a chi square of 65536
4-bit samples.  The number of degrees of freedom is 15.
The chi square is computed for 4 bits as output from
erandupwr().

------------------------------------------------------

Second uniform distribution chi square test.
The unsigned integer from erandu() is tested in
4-bit groups.
     Bits
    29-32
    25-28
    21-24
    17-20
    13-16
     9-12
     5-8
     1-4

There are no parameters.
Usage:

./uintchi | less

The output from uintchi for each group of 4 bits
is a chi square of 65536 4-bit samples.  Number of
degrees of freedom is 15.

This test fails for bits 1-4.

------------------------------------------------------

Monte Carlo calculation of Pi/4.
There are no parameters.

./mcpi

The output from mcpi is an approximation of Pi/4
based on a Monte Carlo simulation of a quarter circle
in a unit square.  The formula is x^2 + y^2 < 1.
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/10 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Monte Carlo calculation of Pi/6.
There are no parameters.

./mcsph

The output from mcsph is an approximation of Pi/6
based on a Monte Carlo simulation of a 1/8 sphere.
in a unit cube.  The formula is x^2 + y^2 + z^2 < 1.
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/10 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Monte Carlo Definite Integral of y=x^2.
There are no parameters.

./mcparab

The output from mcparab is an approximation of 1/3
based on a Monte Carlo simulation of the area under a curve
in a unit square.  The formula for the curve is y=x^2.
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/10 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Monte Carlo Definite Integral of a normal bell curve.
There are no parameters.

./mcbell

The output from mcbell is an approximate z-score of 0.3413
based on a Monte Carlo simulation of the area under a normal
bell curve in a unit square.  The formula for the curve is
y=k*e^(-0.5*x^2) where k is 1/sqrt(2pi).
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/5 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Monte Carlo Definite Integral of sin(x).
There are no parameters.

./mcsin

The output from mcsin is approximately 2.0 based on a
Monte Carlo simulation of the area under a sine curve
in a 1 x pi square.  The formula for the curve is y=sin(x).
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/5 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Monte Carlo Definite Integral of cos(x).
There are no parameters.

./mccos

The output from mcsin is approximately Pi based on a
Monte Carlo simulation of the area under a cosine curve
in a 2 x pi square raised above the x axis.
The formula for the curve is y=cos(x) + 1.
erandu is compared with GSL Mersenne Twister, mt19937,
and GSL ranlxd2.  ranlxd2 runs at 1/5 the speed of
erandu.  n = 1 million.  Expected error is 1/1000.

------------------------------------------------------

Binomial distribution chi square test.
There are no parameters.

./binom

The output from binom is a chi square of 65536
16-bit samples.  Number of degrees of freedom is 16.
This test uses Pascal's Triangle for calculating
expected probabilities.

------------------------------------------------------

Poisson distribution chi square test.
There are two parameters, lambda and size of population.

./poischi lambda size

Example:

./poischi 6 100000

The output from poischi is the chi square, with
number of degrees of freedom based on lambda.

------------------------------------------------------

The Anderson-Darling test for a normal distribution is
not included in this repository, because it requires a
statistical package, like R and the nortest library.
In my own testing, erandunorm has passed the Anderson-
Darling test in the R package.  Input to the test was
a Gaussian distribution created by the Box-Muller transform.
erandunorm.c produces numbers in the normal distribution.

Usage:
./erandunorm mean stdev size

Example:
./erandunorm 15.0 2.0 5000

The R package requires an upper limit of 5000 numbers
as input a test.

------------------------------------------------------

Test eranduint() by running erandupat.
This test requires the new curses package.

sudo apt-get install libncurses-dev

./erandupat

The output from erandupat is a random pattern of ASCII characters
on a curses screen.  To quit press 'q'.

------------------------------------------------------

Test erandupwr() by running erandudots.
This test requires X Windows.

sudo apt-get install libx11-dev

./erandudots

The output from erandudots is a random bitmap pattern of pixels 
on an X Windows screen, 512x512.  To quit press 'q'.

With the RANDU algorithm, this test fails, but with erandu,
this test passes the visual test.

------------------------------------------------------

Create a PBM format graphic file based on the erandudots.c
program.

./erandupbm | pnmtopng >erandudots.png
./erandupbm | display

The output from erandupbm is an ASCII PBM file on stdout.
See the picture erandudots.png for an example of this
output.  The PBM file was converted to PNG format using
the Netpbm package.  The conversion program is pnmtopng.

The display program uses ImageMagick to display the
PBM output file. Press 'q' to quit the display program.

------------------------------------------------------

Create a PPM format graphic file (in color), based on the
erandudots.c program.

./eranduppm | pnmtopng >eranduclr.png
./eranduppm | display

The output from eranduppm is a binary PPM file on stdout.
See the picture eranduclr.png for an example of this
output.  The PBM file was converted to PNG format using
the Netpbm package.  The conversion program is pnmtopng.

The display program uses ImageMagick to display the
PPM output file. Press 'q' to quit the display program.

------------------------------------------------------

Random Walk Test:  ranwlk
This test requires X Windows.  See sudo apt-get above.

./tstwlk.sh

The output from tstwlksh is a random walk relative to a midpoint
line on an X Windows screen.  To quit press any key.

------------------------------------------------------

Random Powerball Simulation:  pwrball
pwrball is a random lottery game based on real odds
and real pay-outs.  The jackpot is $1 Billion.
This test requires new curses.  See apt-get above.

./pwrball

The output from pwrball shows money spent and money
received for each prize level.  To quit press 'q'.
The grand totals are in millions of dollars.
The lesser prizes are in thousands of dollars.

------------------------------------------------------

Dieharder Test:  tstdie.sh
Dieharder has to be installed first.

sudo apt-get install libdieharder-dev
sudo apt-get install dieharder

tstdie.sh illustrates how a raw stream of random data is piped
into a down stream test suite.

./tstdie.sh

The output from tstdie.sh is a statistical report.
This is a long running test.  To interrupt press CTRL-C.
The first test takes half minute to print a report.

------------------------------------------------------

TestU01 is more difficult to run with the erandu generator.
You have to download the TestU01 package and then compile it.
Then you have to write and compile a test program in the
examples directory of TestU01.  The short guide for TestU01
gives you examples of how to set up a test.  In particular,
you need to use ufile to read input from eranduraw in your test.
After you get over the learning curve, you will be rewarded
with some strong and varied tests.

------------------------------------------------------

z80rnd.c --- Test the original randu algorithm

This program is used to verify the output of
randu.z80.  See the description of randu.z80 below.

Usage:

./z80rnd count

Where count is 1 to 65535

The z80rnd program uses two algorithms to implement
the randu random number generator.  The seed is
initialized to 1.

The output of z80rnd is the randu seed in two
formats, big endian and little endian.  The big endian
format represents the first algorithm, multiplication
by 65539.  The little endian format represents the second
algorithm, multiplying with shifts and adds.

------------------------------------------------------

randu.z80 --- randu algorithm in Z80 assembler

This program implements the randu algorithm on an
8-bit Z80 computer.  This program depends on two
packages, z80asm and yaze-1.14.

sudo apt-get install z80asm

Download the yaze emulator, version 1.14, from Thomas
Sherrer's website.

http://www.z80.info/z80emu.htm#EMU_CPU_UNIX

This page points to the yaze website at:

ftp://ftp.ping.de/pub/misc/emulators/yaze-1.14.tar.gz

Download yaze-1.14.tar.gz or a later version.
Run the make command to compile the source.
Ignore the warning messages from the compile.
Run the yaze command to emulate a Z80 CP/M 2.2 system.
Mount the directory where you compiled randu.z80.
See the yaze documentation for the mount command.
The compiled output of randu.z80 is called randu.com.

See the description of z80rnd.c above.  The z80rnd program
verifies the results of randu.z80.

Usage:

randu count

Where count is 1 to 65535

The initial seed is set to 1.

The output of randu.com is the randu seed after
count generations.  The value of that seed should
match the output of the z80rnd program above.

A missing parameter message is "0 ?".

See the two pictures randudots.png and randuclr.png
in this repository, for examples of how the randu
algorithm fails randomness tests.

------------------------------------------------------

The website for erandu is at https://aquila62.github.io.
See README.erandu for general information about erandu.
See INSTALL for installing this repository.

